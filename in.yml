pry-debugger:
  commands: [ break, breakpoints, next, step, finish, continue ]
  desc: >-
    An essential gem. Turns Pry into a steppable debugger.
  use cases:
    - Making the basic "require'pry';binding.pry" from a script come alive.
    - In conjunction with pry-rescue, to explore failing tests.
    - Following calls into other libs.
  url: https://github.com/banister/pry-debugger#readme

pry-stack_explorer:
  commands: [ show-stack, up, down, frame ]
  use cases:
    - So many. TODO = document some.
  desc: Allows you to navigate the call stack.
  url: https://github.com/pry/pry-stack_explorer#readme

pry-rescue:
  commands: [ try-again, cd-cause ]
  desc: Provides `Pry.rescue do … end` to capture any exceptions and start pry
    from the context of the source of the exception.
  use cases:
    - Shortens write-run-debug cycles when exceptions are involved.
    - Specifically, RSpec integration. https://github.com/exad/zu/blob/master/spec/spec_helper.rb#L15
    - Exploring causes of hard-to-replicate exceptions.
  url: https://github.com/ConradIrwin/pry-rescue#readme

pry-exception_explorer:
  commands: [ enter-exception, continue-exception, exit-exception ]
  version: '0.1.9'
  desc: >-
    Somewhat of a competitor to pry-rescue, but implemented differently.
    Currently doesn't work on C exceptions (such as `1/0` errors).
  use cases:
    - Let an exception happen in the REPL, then use enter-exception to find it.
    - Inline-style trap
    - Block wrapper-style trap
    - http://vimeo.com/36061298 ← "mini screencast"
  url: https://github.com/pry/pry-exception_explorer#readme

## - pry-disasm

pry-remote-em:
  desc: Starts Pry, listening on a socket, that you can then connect to.
  use cases:
    - Debugging odd glitches, like ones that only occur in production.
    - Cases like with pry-remote but where encryption/auth is needed.
    - "…TODO: fill this list out"
  url: https://github.com/simulacre/pry-remote-em#readme

pry-doc:
  commands: [ 'enhanced ?', 'enhanced $' ]
  desc: >-
    Allows you to look into the Ruby builtin classes with the ? and $ commands.
  use cases:
    - '? [].pop'
    - '$ [].pop'
    - …etc.
  url: https://github.com/banister/pry-doc

pry-docmore:
  commands: [ 'enhanced ?', 'show-docmores' ]
  desc: >-
   show-doc for: $-0 $0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $-a $-d $DEBUG $&
   $@ $\ $` $! $: $, $$ $. $= $> $< $? $+ $" $; $⁄ $~ $* $' $_ $ -F $FILENAME
   $-i $-I $KCODE $-K $-l $LOADED_FEATURES $LOAD_PATH $-p $PROGRAM_NAME $SAFE
   $stderr $stdin $stdout $-v $VERBOSE $-w $-W alia s and begin BEGIN break
   case class defined? def do else elsif __ENCODING__ end END ensure false
   __FILE__ for if in __LINE__ module next nil not or redo rescue retry return
   self super then true undef unless until when while yield'"`
  url: https://github.com/rking/pry-docmore/wiki

pry-theme:
  commands: [ pry-theme ]
  desc: Alternative syntax highlighting.
  use cases:
    - Being more snazzy
    - Making pry more like your editor, so you can scan more easily.
  url: https://github.com/kyrylo/pry-theme

#pry-autopilot:
#  commands: []
#  desc: Script pry to do whatever you want.
#  use cases:
#    - Automatically 'next' until it finds itself inside program code, (rather than gem/stdlib code)
#  url: https://github.com/pry/pry-autopilot#readme

pry-pretty-numeric:
  desc: >-
    A very simple, but nice, plugin. Turns 12345689 into 12_345_689 on output
    (Which is legal Ruby input).
    Note that this currently gets hidden with the awesome_print output.
  use cases:
    - Any time you have big numbers.
  url: https://github.com/genki/pry-pretty-numeric

pry-syntax-hacks:
  commands: []
  desc: >-
    Cirwin's wild bag of tricks. The caveat is that it's pretty wild and
    tricky. Especially since input with `@`s can get rewritten as an
    instance_variable_get. Still, this is only a matter of understanding the
    dialect used, and adapting accordingly.
  use cases:
    - Direct member access; User.new.@secret_password
    - Calling private methods; User.new.!hash_password('foo')
    # TODO: - %w(foo@bar.com biz@buz.com).map &User.:find_by_email
    - Accessing Pry outer bindings; cd (a = Object.new)  then  puts ../a
  url: https://github.com/ConradIrwin/pry-syntax-hacks#readme

pry-highlight:
  commands: [ '>>' ]
  desc: Reformat strings with pretty-printing. Auto-detects JSON/XML/Ruby.
  use cases:
    - After a method produces ugly XML, do ">>" by itself to see it prettied.
    - Pass in the string as an arg, e.g., >> '{"a":1}'
    - Pass in any Ruby as an arg, >> File.read("/var/www/foo.html")
    # TODO - >> -t javascript "function hi() { return 'bye' }")
  url: https://github.com/ConradIrwin/pry-highlight#readme

pry-editline:
  desc: >-
    Pop the current line into a text editor. In tpope's words, "Whenever I'm
    using IRB or Pry, my editor always feels too far away. Yes, there are
    [ways to] spawn an editor and evaluate the result, but that's not what I
    need. Usually I'm about 80 characters or so into a hairy one-liner when I
    think, "you know, I really wish I was in Vim right about now." In Bash,
    one can load the current command line into an editor with C-x C-e. And
    now, you can do so in IRB and Pry."
  use cases:
    - Ctrl+x, Ctrl+e or Ctrl+o  (if in Emacs mode or Vi Insert Mode)
    - v or o (if in Vi Normal Mode)
  url: https://github.com/tpope/pry-editline

pry-git:
  commands: [ 'git add', 'git blame', 'git diff' ]
  desc: Method-level git commands.
  use cases:
    - Blame/diff a specific method.
  url: https://github.com/pry/pry-git

pry-developer_tools:
  commands: [ define-command, edit-command, reload-command ]
  desc: Mostly for Pry/Pry Plugin development, but can be useful interactively.
  use cases:
    - define-command 'r', 'rerun' do run 'history --replay -1' end
    - reload-command show-method
    - edit-command show-method
    - edit-command -p show-method
  url: https://github.com/pry/pry-developer_tools

bond:
  desc: >-
    An excellent tabcompletion gem. Having this dep enables new Pry stuff.
    Note that pry v0.9.10 doesn't have this feature, so you must use a repo
    version.
  use cases:
    - require 'x<tab>'
    - "{asdf: 1, hjkl: 2}[:a<tab>"
    - "Monkey.donkey.<tab> # Old pry completion was generic in this case."
  url: http://tagaholic.me/bond/

jist:
  commands: [ jist, 'enhanced gist' ]
  desc: Replacement for the undermaintained `gist` gem.
  use cases:
    - Improved implementation for Pry's `gist` command.
    - Check out the `jist -h` output on the CLI, by the way.
  url: https://github.com/ConradIrwin/jist#readme

pry-awesome_print:
  desc: >-
    An alternative printing style. A little funky, but more detailed than
    default Pry, especially for complex objects.
  use cases:
    - Compare the output of the large `_pry_` object with and without this.
    - Array indices are shown, so you can enter them in the next REPL line.
    - If you want to see the old output, you can `obj.inspect`
  url: https://github.com/michaeldv/awesome_print#readme
